var Directory, File, LinkedDirectory, LinkedFile;

Directory = React.createClass({
    render: function() {
        return React.createElement("span", {
            className: "bDirectory"
        }, this.props.name);
    }
}), LinkedDirectory = React.createClass({
    render: function() {
        return React.createElement("a", {
            className: "bDirectory",
            href: this.props.href,
            "data-href": this.props.href,
            onClick: this.props.onClick
        }, this.props.name);
    }
}), File = React.createClass({
    render: function() {
        return React.createElement("span", {
            className: "bFile"
        }, this.props.name);
    }
}), LinkedFile = React.createClass({
    render: function() {
        return React.createElement("a", {
            className: "bFile",
            href: this.props.href,
            target: "_blank"
        }, this.props.name);
    }
});

var FileList;

FileList = React.createClass({
    render: function() {
        var contents, onClick;
        return onClick = this.props.onClick, contents = this.props.files.map(function(file) {
            return React.createElement("li", {
                key: file.id,
                className: "bFileList_item"
            }, "d" === file.type ? void 0 === file.href ? React.createElement(Directory, {
                name: file.name
            })({
                " ": " "
            }) : React.createElement(LinkedDirectory, {
                name: file.name,
                href: file.href,
                onClick: onClick
            }) : void 0 === file.href ? React.createElement(File, {
                name: file.name
            }) : React.createElement(LinkedFile, {
                name: file.name,
                href: file.href
            }), " ", " ");
        }), React.createElement(StdOut, {
            output: React.createElement("ul", {
                className: "bFileList"
            }, contents)
        });
    }
});

var Prompt;

Prompt = React.createClass({
    render: function() {
        return React.createElement("span", {
            className: "bPrompt"
        }, "~> ", React.createElement(Directory, {
            name: "scot"
        }));
    }
});

var Intro, LastLogin;

Intro = React.createClass({
    render: function() {
        return React.createElement("div", {
            className: "bIntro"
        }, "Scot Dalton", React.createElement("br", null), "Software Engineer", React.createElement("br", null), "Brooklyn, NY");
    }
}), LastLogin = React.createClass({
    render: function() {
        return React.createElement("div", {
            className: "bLastLogin"
        });
    }
});

var StdIn;

StdIn = React.createClass({
    getInitialState: function() {
        return {
            input: ""
        };
    },
    type: function() {
        return this.props.tty ? this.state.input.length !== this.props.input.length ? (this.setState({
            input: this.props.input.slice(0, this.state.input.length + 1)
        }), setTimeout(this.type, 200)) : this.props.onComplete() : (this.setState({
            input: this.props.input
        }), this.props.onComplete());
    },
    componentDidMount: function() {
        return this.type();
    },
    render: function() {
        return React.createElement("div", {
            className: "bStdIn"
        }, React.createElement(Prompt, null), this.state.input);
    }
});

var StdOut;

StdOut = React.createClass({
    render: function() {
        return React.createElement("div", {
            className: "bStdOut"
        }, this.props.output);
    }
});

var Command;

Command = React.createClass({
    getInitialState: function() {
        return {
            stdOut: null
        };
    },
    stdOut: function() {
        return "ls -a" === this.props.input ? React.createElement(FileList, {
            files: this.props.output,
            onClick: this.props.onClick
        }) : React.createElement(StdOut, {
            output: this.props.output
        });
    },
    inputComplete: function() {
        return this.setState({
            stdOut: this.stdOut()
        }), this.props.onComplete();
    },
    render: function() {
        return React.createElement("div", {
            className: "bCommand"
        }, React.createElement(StdIn, {
            input: this.props.input,
            onComplete: this.inputComplete,
            tty: this.props.tty
        }), this.state.stdOut);
    }
});

var Shell;

Shell = React.createClass({
    getInitialState: function() {
        return {
            commands: []
        };
    },
    createCommand: function(data) {
        return React.createElement(Command, {
            key: data.id,
            onComplete: this.runNextCommand,
            input: data.input,
            output: data.output(),
            tty: this.props.tty,
            onClick: this.props.onClick
        });
    },
    runNextCommand: function() {
        return this.props.tty ? this.state.commands.length !== this.props.commands.length ? this.setState({
            commands: this.props.commands.slice(0, this.state.commands.length + 1)
        }) : void 0 : this.setState({
            commands: this.props.commands
        });
    },
    componentDidMount: function() {
        return this.runNextCommand();
    },
    renderIntro: function() {
        return this.props.intro ? React.createElement(Intro, null) : React.createElement(LastLogin, null);
    },
    render: function() {
        return React.createElement("div", {
            className: "bShell"
        }, this.renderIntro(), this.state.commands.map(this.createCommand));
    }
});

var AboutCommands, AboutFiles, AboutReadme, Application, ContactCommands, ContactFiles, ContactReadme, CvCommands, CvFiles, CvReadme, HomeCommands, HomeFiles, HomeReadme;

HomeFiles = [ {
    id: "f1",
    name: ".",
    type: "d",
    href: "home"
}, {
    id: "f2",
    name: "..",
    type: "d",
    href: "home"
}, {
    id: "f3",
    name: ".github",
    type: "f",
    href: "https://github.com/scotdalton"
}, {
    id: "f4",
    name: "about",
    type: "d",
    href: "about"
}, {
    id: "f5",
    name: "contact",
    type: "d",
    href: "contact"
}, {
    id: "f6",
    name: "cv",
    type: "d",
    href: "cv"
}, {
    id: "f7",
    name: "linkedin",
    type: "f",
    href: "https://linkedin.com/in/scotdalton"
}, {
    id: "f8",
    name: "README",
    type: "f"
} ], AboutFiles = [ {
    id: "f1",
    name: ".",
    type: "d",
    href: "about"
}, {
    id: "f2",
    name: "..",
    type: "d",
    href: "home"
}, {
    id: "f3",
    name: "README",
    type: "f"
} ], ContactFiles = [ {
    id: "f1",
    name: ".",
    type: "d",
    href: "contact"
}, {
    id: "f2",
    name: "..",
    type: "d",
    href: "home"
}, {
    id: "f3",
    name: "README",
    type: "f"
} ], CvFiles = [ {
    id: "f1",
    name: ".",
    type: "d",
    href: "cv"
}, {
    id: "f2",
    name: "..",
    type: "d",
    href: "home"
}, {
    id: "f3",
    name: "README",
    type: "f"
} ], HomeReadme = "Welcome to my little piece of the internet. To learn a bit more about me, click on the directories above.", 
AboutReadme = "I'm a full stack engineer with over 10 years of experience.", ContactReadme = "Drop me a line at scotdalton at gmail dot com.", 
CvReadme = "Vitae coming soon.", HomeCommands = [ {
    id: "c1",
    input: "whoami",
    output: function() {
        return "Scot Dalton";
    }
}, {
    id: "c2",
    input: "whatami",
    output: function() {
        return "A Software Engineer";
    }
}, {
    id: "c3",
    input: "whereami",
    output: function() {
        return "Brooklyn, NY";
    }
}, {
    id: "c4",
    input: "pwd",
    output: function() {
        return React.createElement(Directory, {
            name: "/home/scot"
        });
    }
}, {
    id: "c5",
    input: "ls -a",
    output: function() {
        return HomeFiles;
    }
}, {
    id: "c6",
    input: "cat README",
    output: function() {
        return HomeReadme;
    }
} ], AboutCommands = [ {
    id: "c1",
    input: "pwd",
    output: function() {
        return React.createElement(Directory, {
            name: "/home/scot/about"
        });
    }
}, {
    id: "c2",
    input: "ls -a",
    output: function() {
        return AboutFiles;
    }
}, {
    id: "c3",
    input: "cat README",
    output: function() {
        return AboutReadme;
    }
} ], ContactCommands = [ {
    id: "c1",
    input: "pwd",
    output: function() {
        return React.createElement(Directory, {
            name: "/home/scot/contact"
        });
    }
}, {
    id: "c2",
    input: "ls -a",
    output: function() {
        return ContactFiles;
    }
}, {
    id: "c3",
    input: "cat README",
    output: function() {
        return ContactReadme;
    }
} ], CvCommands = [ {
    id: "c1",
    input: "pwd",
    output: function() {
        return React.createElement(Directory, {
            name: "/home/scot/cv"
        });
    }
}, {
    id: "c2",
    input: "ls -a",
    output: function() {
        return CvFiles;
    }
}, {
    id: "c3",
    input: "cat README",
    output: function() {
        return CvReadme;
    }
} ], Application = React.createClass({
    onClick: function(event) {
        var shell, tty;
        return event.preventDefault(), tty = this.state.tty, tty[this.state.shell] = !1, 
        shell = event.target.dataset.href, this.setState({
            shell: shell,
            tty: tty
        });
    },
    getInitialState: function() {
        return {
            shell: "home",
            tty: {
                home: !0,
                about: !0,
                contact: !0,
                cv: !0
            }
        };
    },
    render: function() {
        switch (this.state.shell) {
          case "about":
            return React.createElement(Shell, {
                key: "about",
                commands: AboutCommands,
                intro: !0,
                tty: this.state.tty.about,
                onClick: this.onClick
            });

          case "contact":
            return React.createElement(Shell, {
                key: "contact",
                commands: ContactCommands,
                intro: !0,
                tty: this.state.tty.contact,
                onClick: this.onClick
            });

          case "cv":
            return React.createElement(Shell, {
                key: "cv",
                commands: CvCommands,
                intro: !0,
                tty: this.state.tty.cv,
                onClick: this.onClick
            });

          case "home":
            return React.createElement(Shell, {
                key: "home",
                commands: HomeCommands,
                tty: this.state.tty.home,
                onClick: this.onClick
            });
        }
    }
}), React.render(React.createElement(Application, null), document.getElementById("content"));